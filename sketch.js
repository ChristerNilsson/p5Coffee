// Generated by CoffeeScript 1.11.1
var bg, changeLayout, circle, co, draw, f_resize, fc, fixColor, grid, initial_code, print, range, rd, reset, resizeTimer, run, run0, run1, sc, setMsg, setup, student, sw;

student = {};

student.running = 0;

student.button = 0;

student.myCodeMirror = 0;

student.msg = 0;

student.setup = function() {};

student.draw = function() {};

setup = function() {
  var c;
  c = createCanvas(600, 600);
  pixelDensity(1);
  c.parent('canvas');
  student.msg = $('#msg');
  student.button = createButton("run");
  student.button.position(560, 600);
  student.button.size(40, 20);
  return student.button.mousePressed(run);
};

draw = function() {
  if (student.running === 1) {
    return student.draw();
  } else {
    return bg(1);
  }
};

reset = function() {
  colorMode(RGB, 255);
  background(0);
  fill(0);
  return stroke(255);
};

grid = function() {
  var i, j, len, ref;
  push();
  sc(1);
  ref = range(30);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    line(0, 20 * i, 200, 20 * i);
    line(20 * i, 0, 20 * i, 200);
  }
  return pop();
};

fixColor = function(args) {
  var a, b, g, n, r;
  n = args.length;
  r = 0;
  g = 0;
  b = 0;
  a = 1;
  if (n === 1) {
    r = args[0];
    g = r;
    b = r;
  } else if (n === 3) {
    r = args[0];
    g = args[1];
    b = args[2];
  } else if (n === 4) {
    r = args[0];
    g = args[1];
    b = args[2];
    a = args[3];
  }
  return color(255 * r, 255 * g, 255 * b, 255 * a);
};

bg = function() {
  return background(fixColor(arguments));
};

sw = function(n) {
  return strokeWeight(n);
};

circle = function(x, y, r) {
  return ellipse(x, y, 2 * r, 2 * r);
};

rd = function(vinkel) {
  return rotate(radians(vinkel));
};

print = function(s) {
  return console.log(s);
};

co = function() {
  return fixColor(arguments);
};

fc = function() {
  var n;
  n = arguments.length;
  if (n === 0) {
    return noFill();
  } else {
    return fill(fixColor(arguments));
  }
};

sc = function(r, g, b) {
  var n;
  n = arguments.length;
  if (n === 0) {
    return noStroke();
  } else {
    return stroke(fixColor(arguments));
  }
};

range = function() {
  var n;
  n = arguments.length;
  if (n === 1) {
    return _.range(arguments[0]);
  } else if (n === 2) {
    return _.range(arguments[0], arguments[1]);
  } else if (n === 3) {
    return _.range(arguments[0], arguments[1], arguments[2]);
  }
};

run0 = function() {
  var b, orig;
  b = student.myCodeMirror.getValue();
  orig = {};
  orig.setup = setup;
  orig.draw = draw;
  setup = function() {};
  draw = function() {};
  run1(transpile(b));
  student.draw = draw;
  student.setup = setup;
  draw = orig.draw;
  return setup = orig.setup;
};

run1 = function(code) {
  var err;
  resetMatrix();
  rectMode(CORNER);
  push();
  reset();
  try {
    setMsg('');
    eval(code);
    return pop();
  } catch (error) {
    err = error;
    pop();
    return setMsg(err.stack);
  }
};

run = function() {
  student.running = 1 - student.running;
  if (student.running === 1) {
    run0();
    return student.setup();
  } else {
    return background(255);
  }
};

window.onload = function() {
  student.myCodeMirror = CodeMirror.fromTextArea(document.getElementById("code"), {
    lineNumbers: true,
    mode: "coffeescript",
    keyMap: "sublime",
    theme: "dracula",
    autoCloseBrackets: true,
    lineWiseCopyCut: true,
    tabSize: 2,
    indentWithTabs: true
  });
  $(".CodeMirror").css('font-size', "16pt");
  student.myCodeMirror.setValue(initial_code);
  student.myCodeMirror.refresh();
  background(128);
  student.myCodeMirror.focus();
  window.resizeTo(1000, 750);
  return changeLayout();
};

changeLayout = function() {
  var w;
  w = $(window).width();
  $(".CodeMirror").width(w - 600);
  $(".CodeMirror").css({
    top: 0,
    left: 600,
    height: 600,
    position: 'absolute'
  });
  $("#canvas").css({
    left: 0,
    top: 0,
    position: 'absolute'
  });
  return $("#msg").width(w - 600);
};

resizeTimer = 0;

f_resize = function() {
  clearTimeout(resizeTimer);
  return resizeTimer = setTimeout(changeLayout, 10);
};

setMsg = function(txt) {
  student.msg.val(txt);
  if (txt === '') {
    return student.msg.css('background-color', '#FFFFFF');
  } else {
    return student.msg.css('background-color', '#FF0000');
  }
};

initial_code = "balls = []\n\nclass Ball\n	constructor : (@x,@y, @vx,@vy, @size=50) -> \n	draw : ->\n		fc()\n		circle @x,@y,@size\n		@x += @vx\n		@y += @vy\n		@vx = -@vx unless @size < @x < width-@size\n		@vy = if @y < height-@size then @vy+0.1 else -@vy\n\n@draw = ->\n	bg 0.5\n	for ball in balls\n		ball.draw()\n	fc 0\n	textSize 40\n	text balls.length, 10,40\n		\n@mousePressed = ->\n	if mouseX < width and mouseY < height\n		balls.push new Ball x=mouseX,y=mouseY, vx=random(-1,1),vy=0";
