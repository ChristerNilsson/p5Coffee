// Generated by CoffeeScript 1.11.1
var bg, button, changeLayout, circle, co, draw, f_resize, fc, fixColor, grid, initial_code, msg, myCodeMirror, print, range, rd, reset, resizeTimer, run, run0, run1, running, sc, setMsg, setup, student_draw, student_setup, sw;

running = 0;

button = 0;

myCodeMirror = 0;

msg = 0;

student_draw = 0;

student_setup = 0;

setup = function() {
  var c;
  c = createCanvas(600, 600);
  pixelDensity(1);
  c.parent('canvas');
  msg = $('#msg');
  button = createButton("run");
  button.position(560, 600);
  button.size(40, 20);
  return button.mousePressed(run);
};

draw = function() {
  if (running === 1) {
    return student_draw();
  } else {
    return bg(1);
  }
};

reset = function() {
  colorMode(RGB, 255);
  background(0);
  fill(0);
  return stroke(255);
};

grid = function() {
  var i, j, len, ref;
  push();
  sc(1);
  ref = range(30);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    line(0, 20 * i, 200, 20 * i);
    line(20 * i, 0, 20 * i, 200);
  }
  return pop();
};

print = function(s) {
  return console.log(s);
};

co = function() {
  return fixColor(arguments);
};

fixColor = function(args) {
  var a, b, g, n, r;
  n = args.length;
  r = 0;
  g = 0;
  b = 0;
  a = 1;
  if (n === 1) {
    r = args[0];
    g = r;
    b = r;
  } else if (n === 3) {
    r = args[0];
    g = args[1];
    b = args[2];
  } else if (n === 4) {
    r = args[0];
    g = args[1];
    b = args[2];
    a = args[3];
  }
  return color(255 * r, 255 * g, 255 * b, 255 * a);
};

bg = function() {
  return background(fixColor(arguments));
};

fc = function() {
  var n;
  n = arguments.length;
  if (n === 0) {
    return noFill();
  } else {
    return fill(fixColor(arguments));
  }
};

sc = function(r, g, b) {
  var n;
  n = arguments.length;
  if (n === 0) {
    return noStroke();
  } else {
    return stroke(fixColor(arguments));
  }
};

sw = function(n) {
  return strokeWeight(n);
};

circle = function(x, y, r) {
  return ellipse(x, y, 2 * r, 2 * r);
};

rd = function(vinkel) {
  return rotate(radians(vinkel));
};

range = function() {
  var n;
  n = arguments.length;
  if (n === 1) {
    return _.range(arguments[0]);
  } else if (n === 2) {
    return _.range(arguments[0], arguments[1]);
  } else if (n === 3) {
    return _.range(arguments[0], arguments[1], arguments[2]);
  }
};

run0 = function() {
  var b, orig_draw, orig_setup;
  b = myCodeMirror.getValue();
  orig_setup = setup;
  orig_draw = draw;
  setup = function() {};
  draw = function() {};
  run1(transpile(b));
  student_draw = draw;
  student_setup = setup;
  draw = orig_draw;
  return setup = orig_setup;
};

run1 = function(code) {
  var err;
  resetMatrix();
  rectMode(CORNER);
  push();
  reset();
  try {
    setMsg('');
    console.log(code);
    eval(code);
    return pop();
  } catch (error) {
    err = error;
    pop();
    return setMsg(err.stack);
  }
};

run = function() {
  running = 1 - running;
  if (running === 1) {
    run0();
    return window.student_setup();
  } else {
    return background(255);
  }
};

window.onload = function() {
  myCodeMirror = CodeMirror.fromTextArea(document.getElementById("code"), {
    lineNumbers: true,
    mode: "coffeescript",
    keyMap: "sublime",
    theme: "dracula",
    autoCloseBrackets: true,
    lineWiseCopyCut: true,
    tabSize: 2,
    indentWithTabs: true
  });
  $(".CodeMirror").css('font-size', "16pt");
  myCodeMirror.setValue(initial_code);
  myCodeMirror.refresh();
  background(128);
  myCodeMirror.focus();
  window.resizeTo(1000, 750);
  return changeLayout();
};

changeLayout = function() {
  var w;
  w = $(window).width();
  $(".CodeMirror").width(w - 600);
  $(".CodeMirror").css({
    top: 0,
    left: 600,
    height: 600,
    position: 'absolute'
  });
  $("#canvas").css({
    top: 0,
    position: 'absolute'
  });
  $("#canvas").left(0);
  return $("#msg").width(w - 600);
};

resizeTimer = 0;

f_resize = function() {
  clearTimeout(resizeTimer);
  return resizeTimer = setTimeout(changeLayout, 10);
};

setMsg = function(txt) {
  msg.val(txt);
  if (txt === '') {
    return msg.css('background-color', '#FFFFFF');
  } else {
    return msg.css('background-color', '#FF0000');
  }
};

initial_code = "balls = []\n\nclass Ball\n	constructor : (@x,@y,@size, @vx,@vy, @r,@g,@b) ->\n\n	draw : ->\n		fc @r,@g,@b\n		circle @x,@y,@size\n		@x += @vx\n		@y += @vy\n		@vx = -@vx unless @size < @x < width-@size\n		@vy = -@vy unless @size < @y < height-@size\n		@vy += 0.1\n\nwindow.setup = ->\n	balls.push new Ball x=100,y=100,size=50, vx=2,vy=1, r=1,g=0,b=0\n	balls.push new Ball x= 50,y=100,size=40, vx=1,vy=3, r=1,g=1,b=0\n\nwindow.draw = ->\n	bg 0.5\n	for ball in balls\n		ball.draw()";
